{"version":3,"sources":["requests/getImages.js","components/Search.js","components/SearchResults.js","components/App.js","serviceWorker.js","index.js"],"names":["getImages","query","axios","get","then","response","data","collection","items","filter","imageResult","media_type","map","image","links","href","catch","err","console","log","Promise","resolve","Search","setSearchResults","useState","value","setValue","loading","setLoading","handleSubmit","event","a","preventDefault","className","onSubmit","type","onChange","e","target","SearchResults","src","alt","App","searchResults","length","element","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yVAuBeA,EArBG,SAACC,GAEf,OAAKA,EAGMC,IACFC,IADE,+CAC0CF,IAC5CG,MAAK,SAACC,GAKP,MAJqB,CAACA,EAASC,KAAKC,WAAWC,OAEb,GAAGC,QAAO,SAAAC,GAAW,MAAuC,UAAnCA,EAAYJ,KAAK,GAAGK,cACnDC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,MAAM,GAAGC,WAIvDC,OAAM,SAACC,GACJC,QAAQC,IAAIF,MAbbG,QAAQC,QAAQ,KCyChBC,EAzCA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAAuB,EACXC,mBAAS,IADE,mBAC9BC,EAD8B,KACvBC,EADuB,OAEPF,oBAAS,GAFF,mBAE9BG,EAF8B,KAErBC,EAFqB,KAI/BC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACjBH,GAAW,GACXE,EAAME,iBAFW,KAGjBT,EAHiB,SAGMvB,EAAUyB,GAHhB,kCAIjBG,GAAW,GAJM,2CAAH,sDAMlB,OACI,yBAAKK,UAAU,UACX,0BACIA,UAAU,cACVC,SAAUL,GACV,2BACII,UAAU,eACVE,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOX,EAASW,EAAEC,OAAOb,UAEvC,4BACIQ,UAAU,gBACVE,KAAK,UAFT,YAMHR,GACE,yBAAKM,UAAU,UACX,iCCXJM,G,MAlBO,SAAC,GAAe,IAAb1B,EAAY,EAAZA,MACrB,OAEI,yBAAKoB,UAAU,iBACX,yBACIA,UAAU,aACVO,IAAK3B,EACL4B,IAAK5B,OCcN6B,MApBf,WAAgB,IAAD,EAC6BlB,mBAAS,IADtC,mBACNmB,EADM,KACSpB,EADT,KAGb,OACE,yBAAKU,UAAU,OACb,yBACEA,UAAU,YACVO,IAAI,4GACJC,IAAI,aAEN,kBAAC,EAAD,CAAQlB,iBAAkBA,IAC1B,yBAAKU,UAAU,kBACZU,GAAiBA,EAAcC,OAAS,GAAMD,EAAc/B,KAAI,SAACiC,GAAD,OAAa,kBAAC,EAAD,CAAeC,IAAKD,EAAShC,MAAOgC,UCLtGE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEd7C,OAAM,SAAA8C,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.4c135c0d.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst getImages = (query) => {\n    \n    if (!query) {\n        return Promise.resolve([]);\n    } else {\n        return axios \n            .get(`https://images-api.nasa.gov/search?q=${query}`)\n            .then((response) => {\n            const imageResults = [response.data.collection.items];\n          \n            const parsedImages = imageResults[0].filter(imageResult => imageResult.data[0].media_type === \"image\");\n            const images = parsedImages.map(image => image.links[0].href)\n            return images\n            \n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n}\n\nexport default getImages;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\nimport '../styles/Search.css';\nimport getImages from '../requests/getImages';\n\nconst Search = ({ setSearchResults }) => {\n    const [value, setValue] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const handleSubmit = async (event) => {\n        setLoading(true);\n        event.preventDefault();\n        setSearchResults(await getImages(value));\n        setLoading(false);\n    };\n    return (\n        <div className=\"search\">\n            <form\n                className=\"search-form\"\n                onSubmit={handleSubmit}>\n                <input\n                    className=\"search-input\"\n                    type=\"text\"\n                    onChange={(e) => setValue(e.target.value)}\n                />\n                <button\n                    className=\"submit-button\"\n                    type=\"submit\">Search!\n                </button>\n            </form>\n          \n            {loading && ( \n               <div className=\"loader\">\n                   <div></div>\n                   </div>\n            )}\n          \n        </div>\n    );\n};\n\nSearch.propTypes = {\n    setSearchResults: PropTypes.func.isRequired,\n};\n\n\nexport default Search;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport '../styles/SearchResults.css';\n\nconst SearchResults = ({ image }) => {\n    return (\n       \n        <div className=\"SearchResults\" >\n            <img\n                className=\"image-card\"\n                src={image}\n                alt={image}\n\n            />\n        </div>\n    );\n};\n\nSearchResults.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default SearchResults;","import React, { useState } from 'react';\nimport '../styles/App.css';\nimport Search from \"./Search\";\nimport SearchResults from './SearchResults';\n\nfunction App() {\n  const [searchResults, setSearchResults] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <img\n        className=\"nasa-logo\"\n        src=\"https://www.gazettenet.com/getattachment/1914d482-e47e-4202-809d-fb0c7d5828ba/b6-nasa-logo-biz-072219-ph2\"\n        alt=\"nasaLogo\"\n      />\n      <Search setSearchResults={setSearchResults} />\n      <div className=\"search-results\">\n        {searchResults && searchResults.length > 0 && (searchResults.map((element) => <SearchResults key={element} image={element} />))}\n      </div>\n    </div>\n\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}